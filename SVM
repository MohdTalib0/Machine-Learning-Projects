from sklearn.datasets import make_blobs
import matplotlib.pyplot as plt
import numpy as np
x,y = make_blobs(n_samples=500,n_features=2,centers=2,cluster_std=2.5,random_state=1)
x.shape
plt.scatter(x[y==0,0],x[y==0,1],c='red',label='0',edgecolors='k')
plt.scatter(x[y==1,0],x[y==1,1],c='blue',label='1',edgecolors='k')
plt.legend()
plt.show()
from sklearn.svm import SVC
#gamma=.01,10
clf = SVC(kernel='rbf',gamma=10)  #model assumes that data is non-linear separable
#clf = SVC(kernel='linear')   #model assumes that data is linear separable
clf.fit(x,y)
score = clf.score(x,y)
score
pred = clf.predict(x)
np.where(pred!=y)
test = [-6,0.5]
plt.figure(figsize=(12,8))
plt.scatter(test[0],test[1],c='green',label='test_sample',s=80)

plt.scatter(x[y==0,0],x[y==0,1],c='red',label='0',edgecolors='k',s=80)
plt.scatter(x[y==1,0],x[y==1,1],c='blue',label='1',edgecolors='k',s=80)
plt.legend()
plt.show()
clf.predict([test])


Non-linear dataset

from sklearn.datasets import make_circles
#to avoid future warning
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
x1,y1 = make_circles(n_samples=100,random_state=10,noise=.05)
plt.scatter(x1[y1==0,0],x1[y1==0,1],c='red',label='0')
plt.scatter(x1[y1==1,0],x1[y1==1,1],c='blue',label='1')
plt.legend()
plt.show()
clf=SVC(kernel='rbf',gamma=10)
clf.fit(x1,y1)
clf.score(x1,y1)
