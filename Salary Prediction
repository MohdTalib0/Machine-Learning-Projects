import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
df = pd.read_csv('C:/Users/hp/OneDrive/Desktop/Prutor/Machine_Learning/Machine_Learning/COMPLETE_ml_code_files/ml_code_files/day_3_Linear_regression/Salary_Data.csv')
df.head()
#YearsExperience	Salary
#0	1.1	39343.0
#1	1.3	46205.0
#2	1.5	37731.0
#3	2.0	43525.0
#34	2.2	39891.0
df.shape
#(30, 2)
### missing data
df.isnull().sum()
#YearsExperience    0
#Salary             0
#dtype: int64
### split data into train and test 
#train_data : 80% or 70% or 75%
#test_data : 20%  or 30% or 25%
from sklearn.model_selection import train_test_split
X = df.iloc[:,[0]].values
y = df.Salary
X.shape
#(30, 1)
train_input,test_input,train_output,test_output = train_test_split(X,y,test_size=.20)
train_input.shape
#(24, 1)
test_input.shape
#(6, 1)
#Choose ML algorithm
from sklearn.linear_model import LinearRegression
lr = LinearRegression()
# train set:training a model (60%)
# valid set:evaluation       (20%)
# test set: once we get our final model (20%)
#train algo. using training data
lr.fit(train_input,train_output)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None, normalize=False)
m=lr.coef_          #m 
m
array([9489.58078902])
b=lr.intercept_         #b
b
#25689.132990280137
#y = mx + b
Evaluate model performance
test = 7.9
t = np.array([[test]])
t.ndim
2
lr.predict(t)
array([100656.82122356])
### 
#y = (m*test) + b
#y
 
 
test_input.shape
#(6, 1)
pred = lr.predict(test_input)
pred
#array([ 53208.91727844, 100656.82122356,  62698.49806747, 111095.36009148,
        93065.15659234,  64596.41422527])
test_output
#5      56642.0
#22    101302.0
#10     63218.0
#25    105582.0
#21     98273.0
#13     57081.0
#Name: Salary, dtype: float64
from sklearn.metrics import r2_score,mean_squared_error
r2_score(test_output,pred)  #test accuracy score
0.9547325817359553
mean_squared_error(test_output,pred)
